name: Build and Publish

on:
  workflow_dispatch:

# env:
#   NODE_VERSION: ${{ secrets.NODE_VERSION }}
#   YARN_VERSION: ${{ secrets.YARN_VERSION }}
#   CHROME_VERSION: ${{ secrets.CHROME_VERSION }}
#   FIREFOX_VERSION: ${{ secrets.FIREFOX_VERSION }}
#   EDGE_VERSION: ${{ secrets.EDGE_VERSION }}
#   CYPRESS_VERSION: ${{ secrets.CYPRESS_VERSION }}

jobs:
  lint:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
      - run: npm run format:check

  check-factory-versions:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Load .env
        run: ./load-env.sh
        working-directory: factory

      - name: Show environment variables
        run: |
          echo BASE_IMAGE $BASE_IMAGE
          echo BASE_IMAGE_TAG $BASE_IMAGE_TAG

      # - name: Build Docker image
      #   run: docker compose --progress plain build factory
      #   working-directory: factory
      # - name: Build test image
      #   run: docker compose --progress plain build test-factory-all-included
      #   working-directory: factory/test-project
      # - name: Check versions
      #   run: |
      #     set -e
      #     echo "Checking Node, Yarn, Chrome, Firefox, Edge, Cypress, Git, SSH versions..."
      #     docker compose run --rm test-factory-all-included node -v
      #     docker compose run --rm test-factory-all-included yarn -v
      #     docker compose run --rm test-factory-all-included google-chrome --version
      #     docker compose run --rm test-factory-all-included firefox --version
      #     docker compose run --rm test-factory-all-included edge --version
      #     docker compose run --rm test-factory-all-included cypress -v
      #     docker compose run --rm test-factory-all-included git --version
      #     docker compose run --rm test-factory-all-included ssh -V
      #   working-directory: factory/test-project

  # test-image:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-24.04]
  #       target: [factory, base, browsers, included]
  #       test-target: [
  #         test-factory-electron, test-factory-chrome, test-factory-firefox,
  #         test-browsers-electron, test-browsers-firefox, test-included-electron, test-included-firefox
  #       ]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Load .env
  #       run: echo "set -a && . ./factory/.env && set +a" >> $GITHUB_ENV
  #     - name: Build Docker image
  #       run: |
  #         if [[ "${{ matrix.target }}" != "factory" ]]; then
  #           docker compose --progress plain build factory
  #         fi
  #         docker compose --progress plain build ${{ matrix.target }}
  #       working-directory: factory
  #     - name: Run test
  #       run: |
  #         docker compose --progress plain build ${{ matrix.test-target }}
  #         docker compose run --rm ${{ matrix.test-target }}
  #       working-directory: factory/test-project

  # push:
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-24.04
  #   needs: [lint, check-factory-versions, test-image]
  #   strategy:
  #     matrix:
  #       target: [factory, base, browsers, included]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Load .env
  #       run: echo "set -a && . ./factory/.env && set +a" >> $GITHUB_ENV
  #     - name: Login to DockerHub
  #       run: echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  #       env:
  #         DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  #         DOCKERHUB_PASS: ${{ secrets.DOCKERHUB_PASS }}
  #     - name: Login to AWS ECR
  #       run: |
  #         aws ecr-public get-login-password --region $AWS_ECR_REGION | \
  #         docker login --username AWS --password-stdin $AWS_ECR_PREFIX
  #       env:
  #         AWS_ECR_REGION: ${{ secrets.AWS_ECR_REGION }}
  #         AWS_ECR_PREFIX: ${{ secrets.AWS_ECR_PREFIX }}
  #     - name: Setup Buildx
  #       run: |
  #         docker run --privileged --rm tonistiigi/binfmt --install linux/amd64,linux/arm64
  #         docker buildx create --name builder --use
  #     - name: Push Docker and ECR images
  #       run: |
  #         docker buildx bake -f ./docker-compose.yml --progress plain --set *.platform=linux/arm64,linux/amd64 --push ${{ matrix.target }}
  #         REPO_PREFIX=$AWS_ECR_PREFIX/ docker buildx bake -f ./docker-compose.yml --progress plain --set *.platform=linux/arm64,linux/amd64 --push ${{ matrix.target }}
  #       working-directory: factory
